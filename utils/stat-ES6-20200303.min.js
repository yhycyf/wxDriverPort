
"use strict";
function _typeof(e) {
  return (_typeof =
    "function" == typeof Symbol && "symbol" == typeof Symbol.iterator
      ? function (e) {
          return typeof e;
        }
      : function (e) {
          return e &&
            "function" == typeof Symbol &&
            e.constructor === Symbol &&
            e !== Symbol.prototype
            ? "symbol"
            : typeof e;
        })(e);
}
Object.defineProperty(exports, "__esModule", { value: !0 }),
  (exports.default = void 0);
var Stat = function () {
    var r = {
      login: function () {},
      getLaunchOptionsSync: function () {
        return {};
      },
      setStorageSync: function () {},
      getStorageSync: function () {},
      removeStorageSync: function () {},
      request: function () {},
      onHide: function () {},
      onShow: function () {},
    };
    function i(e, t) {
      if ("object" == _typeof(e) && "object" == _typeof(t))
        for (var n in t) e[n] || (e[n] = t[n]);
      return e;
    }
    "undefined" != typeof swan
      ? (console.log("检测到百度小程序平台"), (r = i(swan, r)))
      : "undefined" != typeof tt
      ? (console.log("检测到今日头条小程序平台"), (r = i(tt, r)))
      : "undefined" != typeof qq
      ? (console.log("检测到QQ小程序平台"), (r = i(qq, r)))
      : "undefined" != typeof wx
      ? (console.log("检测到微信小程序平台"), (r = i(wx, r)))
      : console.log("未知小程序平台，无法统计"),
      (r.promiseLogin = function () {
        return new Promise(function (t, e) {
          "undefined" != typeof swan
            ? r.getSwanId({
                fail: e,
                success: function (e) {
                  t(e.data);
                },
              })
            : r.login({ force: !1, success: t, fail: e });
        });
      }),
      (r.promiseRequest = function (o, e) {
        return new Promise(function (t, n) {
          o
            ? r.request({
                url: "https://stat.genwowanba.com/applet/" + o,
                data: e,
                header: { "content-type": "application/json" },
                success: function (e) {
                  0 == e.data.code
                    ? (console.log(o + "请求成功"), t(e))
                    : (console.log(
                        o + "请求失败，ret:" + JSON.stringify(e.data)
                      ),
                      n(e));
                },
                fail: n,
              })
            : n("参数错误");
        });
      });
    var a = null,
      u = [],
      p = null;
    function e(e, t, n) {
      if (!e)
        return (
          console.log("请传入正确的appKey"),
          new Promise(function (e, t) {
            t("请传入正确的appKey");
          })
        );
      r.setStorageSync("count_appkey", e),
        t
          ? r.setStorageSync("count_openid", t)
          : (t = r.getStorageSync("count_openid") || ""),
        (n && "object" == _typeof(n)) || (n = r.getLaunchOptionsSync() || {}),
        (n.query = n.query || {});
      var o = "";
      n.ch
        ? (o = n.ch)
        : n.query.ch
        ? (o = n.query.ch)
        : n.query.scene && (o = decodeURIComponent(n.query.scene)),
        r.setStorageSync("count_ch", o);
      var c = {
        channel: o,
        scene: n.scene || "1001",
        appKey: e,
        openid: t,
        options: JSON.stringify(n) || "",
      };
      return t
        ? r.promiseRequest("openHome2.json", c).then(s)
        : r.promiseLogin().then(function (e) {
            return (c = i(c, e)), r.promiseRequest("openHome2.json", c).then(s);
          });
    }
    function s(e) {
      var t = e.data;
      if (t.data.openid) {
        var n = { openid: t.data.openid };
        if (
          (r.setStorageSync("count_openid", n.openid),
          r.getStorageSync("count_userLogin") &&
            (y(n), r.removeStorageSync("count_userLogin")),
          r.getStorageSync("count_userRole") &&
            (g(n), r.removeStorageSync("count_userRole")),
          r.getStorageSync("count_chatCode") &&
            (p && S(n, p), r.removeStorageSync("count_chatCode")),
          r.getStorageSync("count_reportCustomEvent"))
        ) {
          for (var o = 0; o < u.length; o++) {
            var c = u[o];
            (c.openid = n.openid), f(c);
          }
          (u = null), r.removeStorageSync("count_reportCustomEvent");
        }
        t.data.isCountOnline &&
          (function () {
            var e =
              0 < arguments.length && void 0 !== arguments[0]
                ? arguments[0]
                : {};
            "object" != _typeof(e) && (e = {});
            function t() {
              (e.time = new Date().getTime()),
                r.promiseRequest("countOnline.json", e),
                (a = setTimeout(t, 3e4));
            }
            (e.channel = r.getStorageSync("count_ch") || ""),
              (e.appKey = r.getStorageSync("count_appkey") || ""),
              (e.openid = r.getStorageSync("count_openid") || ""),
              r.onHide(function () {
                clearTimeout(a), (a = null);
              }),
              r.onShow(function () {
                a = setTimeout(t, 3e4);
              }),
              (a = setTimeout(t, 3e4));
          })(n);
      } else console.log("init请求失败，openid为空");
    }
    function y() {
      var e =
        0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : {};
      return (
        "object" != _typeof(e) && (e = {}),
        (e.channel = r.getStorageSync("count_ch") || ""),
        (e.appKey = r.getStorageSync("count_appkey") || ""),
        (e.openid = e.openid || r.getStorageSync("count_openid") || ""),
        e.openid && e.appKey
          ? r.promiseRequest("login2.json", e)
          : (r.setStorageSync("count_userLogin", 1),
            new Promise(function (e, t) {
              t("init未成功，将在init后重试login");
            }))
      );
    }
    var t = y;
    function g() {
      var e =
        0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : {};
      return (
        "object" != _typeof(e) && (e = {}),
        (e.channel = r.getStorageSync("count_ch") || ""),
        (e.appKey = r.getStorageSync("count_appkey") || ""),
        (e.openid = e.openid || r.getStorageSync("count_openid") || ""),
        e.openid && e.appKey
          ? r.promiseRequest("createRole2.json", e)
          : (r.setStorageSync("count_userRole", 1),
            new Promise(function (e, t) {
              t("init未成功，将在init后重试createRole");
            }))
      );
    }
    var n = g;
    function o() {
      var e =
          0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : {},
        t = 1 < arguments.length ? arguments[1] : void 0;
      return (
        "object" != _typeof(e) && (e = {}),
        (e.appKey =
          e.appKey || e.appkey || r.getStorageSync("count_appkey") || ""),
        (e.channel = r.getStorageSync("count_ch") || ""),
        (e.openid = r.getStorageSync("count_openid") || ""),
        (e.type = e.type || 1),
        e.appKey
          ? r.promiseRequest("flow.json", e).then(function (e) {
              return "function" == typeof t && t(e.data.data), e.data.data;
            })
          : (console.log("getFlow appKey参数错误"),
            new Promise(function (e, t) {
              t("appKey参数错误");
            }))
      );
    }
    function f() {
      var e =
        0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : {};
      return (
        "object" != _typeof(e) && (e = {}),
        e.eventName && "string" == typeof e.eventName
          ? ((e.appKey = r.getStorageSync("count_appkey") || ""),
            (e.openid = r.getStorageSync("count_openid") || ""),
            (e.channel = r.getStorageSync("count_ch") || ""),
            (e.eventName = e.eventName || ""),
            (e.subEventName = e.subEventName || ""),
            e.openid && e.appKey
              ? r.promiseRequest("event.json", e)
              : (u.push(e),
                r.setStorageSync("count_reportCustomEvent", 1),
                new Promise(function (e, t) {
                  r.setStorageSync("count_reportCustomEvent", 1),
                    t("init未成功，将在init后重试reportCustomEvent");
                })))
          : new Promise(function (e, t) {
              t("参数错误，eventName必须为字符串");
            })
      );
    }
    function S() {
      var e =
          0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : {},
        t = 1 < arguments.length ? arguments[1] : void 0;
      return (
        "object" != _typeof(e) && (e = {}),
        (e.channel = r.getStorageSync("count_ch") || ""),
        (e.appKey = r.getStorageSync("count_appkey") || ""),
        (e.openid = r.getStorageSync("count_openid") || ""),
        e.openid && e.appKey
          ? r.promiseRequest("qrCodeImg.json", e).then(function (e) {
              return "function" == typeof t && t(e.data.data), e.data.data;
            })
          : ("function" == typeof t &&
              ((p = t), r.setStorageSync("count_chatCode", 1)),
            new Promise(function (e, t) {
              t("init尚未成功");
            }))
      );
    }
    var c = S;
    return (
      i(r, {
        initStat: e,
        reportLogin: y,
        reportCreateRole: g,
        getFlow: o,
        getChatCode: c,
        reportCustomEvent: f,
      }),
      {
        sdk: r,
        init: e,
        login: t,
        reportLogin: y,
        createRole: n,
        reportCreateRole: g,
        getFlow: o,
        chatCode: S,
        getChatCode: c,
        reportCustomEvent: f,
      }
    );
  },
  stat = Stat(),
  _default = stat;
exports.default = _default;
